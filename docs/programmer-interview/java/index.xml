<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/programmer-interview/java/</link>
    <description>Recent content in Java on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://kunzhao.org/docs/programmer-interview/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>并发 - 多线程的实现方式</title>
      <link>https://kunzhao.org/docs/programmer-interview/java/multi-thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/programmer-interview/java/multi-thread/</guid>
      <description>多线程的实现方式 Java多线程实现方式主要有四种：
 继承 Thread 类 实现 Runnable 接口 实现 Callable 接口 使用线程池  继承 Thread 类 class MyThread extends Thread { @Override public void run() { System.out.println(&amp;#34;MyThread.run()&amp;#34;); } } MyThread myThread1 = new MyThread(); MyThread myThread2 = new MyThread(); myThread1.start(); myThread2.start(); 实现 Runnable 接口 class MyTask implements Runnable { @Override public void run() { System.out.println(&amp;#34;MyTask running....&amp;#34;); } } new Thread(new MyTask()).start(); 实现 Callable 接口 Callable 接口可以在任务执行完之后获取结果：
public class MyCallable implements Callable&amp;lt;String&amp;gt; { @Override public String call() throws Exception { return String.</description>
    </item>
    
  </channel>
</rss>