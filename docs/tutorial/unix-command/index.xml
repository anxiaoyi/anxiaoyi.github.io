<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UNIX 常用命令大全 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/unix-command/</link>
    <description>Recent content in UNIX 常用命令大全 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/unix-command/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>grep</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/grep/</guid>
      <description>grep grep 命令如何使用？grep 命令的常见用法？
简介 grep 命令用于搜索文本。它在给定文件中搜索包含与给定字符串或单词匹配的行。它是 Linux 和类 Unix 系统中最有用的命令之一。让我们看看如何在 Linux 或类 Unix 系统上使用 grep。
grep 命令是一个包含 grep、egrep 和 fgrep 命令的大家族，都用于搜索文本。
常见用法 下面是一些标准的 grep 命令，通过示例说明了如何在Linux、macOS和Unix上使用 grep：
（1）在文件 foo.txt 中搜索单词 word
grep &amp;#39;word&amp;#39; foo.txt （2）在文件 foo.txt 中搜索单词 word，并且忽略大小写
grep -i &amp;#39;word&amp;#39; foo.txt 上述命令会把位于 foo.txt 文件中的 WORD、Word、word 等忽略大小写的 word 全部搜索出来。
（3）在当前目录以及所有子目录中查找单词 word
grep -R &amp;#39;word&amp;#39; .  注意：最后面有一个点，代表当前目录。-r 命令也是递归搜索，只是 -r 不会搜索符号链接文件。
 （4）搜索并显示单词 word 出现的次数
grep -c &amp;#39;word&amp;#39; foo.txt （5）只匹配单词 word</description>
    </item>
    
    <item>
      <title>find</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/find/</guid>
      <description>find find 命令的常见用法有哪些？find 命令的例子。
简介 Linux Find命令是类Unix操作系统中最重要、最常用的命令行实用程序之一。find 命令可以，根据不同的查找条件，来查询匹配不同的文件或目录列表。
find 可用于根据各种条件查找，例如您可以按权限、用户、组、文件类型、日期、大小和其他可能的条件查找文件。
通过本文，我们将以示例的形式分享我们的日常Linux find命令体验及其使用。
格式 find [path...] [test...] [action...]  path：find 命令的第一件事，查看每个路径 test：对于遇到的每个文件，find 应用测试条件 action：一旦搜索完成，find 对每个文件执行相应的操作  路径示例：
 find /usr/bin find / find . find ~  测试示例：
 -name pattern：包含 pattern 的文件名 -iname pattern：包含 pattern 的文件名（忽略大小写） -type [df]：文件类型，d 代表目录，f 代表文件 -perm mode：设置为 mode 的文件权限 -user userid：用户为 userid -group groupid：组为 groupid -size [-+]n[cbkMG]：大小为 n[字符(字节)、块、千字节、兆字节、吉字节] -empty：空文件 -amin [-+]n：n 分钟之前访问 -anewer file：file 文件之后访问 -atime [-+]n：n 天之前访问 -cmin [-+]n：n 分钟之前状态改变 -cnewer file：file 文件之后状态改变 -ctime [-+]n：n 天状态之前改变 -mmin [-+]n：n 分钟之前修改 -mtime [-+]n：n 天之前修改 -newer file：file 文件之后修改   - 代表：小于，+ 代表：大于</description>
    </item>
    
    <item>
      <title>ls</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/ls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/ls/</guid>
      <description>ls ls 命令教程，ls 命令的常见使用方法介绍。
简介 ls 命令是一个命令行实用程序，用于列出通过标准输入提供给它的一个或多个目录的内容。它将结果写入标准输出。ls 命令支持显示关于文件的各种信息、对一系列选项进行排序和递归列表。
示例 （1）显示目录中的文件
ls /home/zk （2）显示隐藏的文件和文件夹
ls -a /home/zk 结果：
ls -a /home/george . .goobook .tmux.conf .. .goobook_auth.json .urlview .asoundrc .inputrc .vim .asoundrc.asoundconf .install.sh .viminfo .asoundrc.asoundconf.bak .irbrc .viminfo.tmp ... （3）列出来的文件，标识上文件的类型
ls -F 显示结果如下所示：
bin@ dotfiles/ file.txt irc/ src/ code/ Downloads/ go/ logs/ 不同文件类型显示的后缀不同：
 /：目录 @：symbolic link |：FIFO =：socket &amp;gt;：door 什么也不显示，代表正常文件  （4）显示更多信息
ls -l 显示结果：
-rwxrw-r-- 10 root root 2048 Jan 13 07:11 afile.</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/ssh/</guid>
      <description>ssh 本文展示了一些常见的 ssh 命令，了解一些 ssh 技巧将有利于任何系统管理员、网络工程师或安全专业人员。
连接远程主机 localhost:~$ ssh -v -p 22 -C neo@remoteserver  -v：打印 debug 日志信息，用于打印连接时候的一些日志。 -p 22：指定连接远程主机的哪个端口，默认情况下，不用指定，因为 ssh 默认端口就是 22。编辑 sshd_config 文件，可以修改默认的 ssh 的监听端口。 -C：传输数据的时候，是否对数据启用压缩。 neo@remoteserver：neo 代表远程主机的用户名，remoteserver 代表远程主机的 IP 或者域名。添加 -4 选项，可以只连接 IPv4 连接；添加 -6 选项，只连接 IPv6 连接。  拷贝文件到远程服务器 远程拷贝文件的命令 scp 建立在 ssh 命令之上：
localhost:~$ scp mypic.png neo@remoteserver:/media/data/mypic_2.png  mypic.png：代表本地电脑上的图片 /media/data/mypic_2.png：代表你想把图片拷贝到远程主机的哪个路径  流量代理 SSH 代理特性被放在第1位是有充分理由的。它的功能比许多用户意识到的要强大得多，它允许您使用几乎任何应用程序访问远程服务器可以访问的任何系统。ssh客户机可以仅用一行代码，就可以使用SOCKS代理服务器在连接隧道上通信。
localhost:~$ ssh -D 8888 user@remoteserver localhost:~$ netstat -pan | grep 8888 tcp 0 0 127.</description>
    </item>
    
    <item>
      <title>shell</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/shell/</guid>
      <description>shell 查看自己正在使用什么 shell：
echo $SHELL 将变量导出到环境变量：
HARLEY=cool export HARLEY  没有简单的方法来区分 shell 变量和环境变量，使用大写可以使变量名突出。
 显示环境变量：
env printenv 显示shell变量：
set 显示变量的值，没有歧义，就可以把花括号去掉。
echo ${ACTIVITY}ing echo $ACTIVITY  当使用变量值的时候，使用花括号是一种好习惯，即便不是必需，这样做可以增强命令的可读性。
 创建变量：
HARLEY=cool WEEDLY=&amp;#34;a cool cat&amp;#34; 修改变量的值：
HARLEY=smart 引用元字符最直接的方法，就是在元字符前面放一个反斜线\，下面这个命令，如果没有反斜线，那么 ; 解释成命令的末尾，然后 come 解释成一条新的命令：
echo It is warm and sunny\; come over and visit 使用双引号引用一串字符，但是保留$、\``、` 的特殊含义。单引号是强引用，单引号内没有字符拥有有特殊的含义。
是不是内置命令：
type command ... history fc -l # c-shell history 重新执行编号为 24 的：
fc -s 24 # c-shell !24 重新执行上一条命令：</description>
    </item>
    
    <item>
      <title>tcpdump</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/tcpdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/tcpdump/</guid>
      <description>tcpdump tcpdump -i any port 3306 -w test.pcap  any: 表示所有网络接口 port: tcp 端口  Wireshark Wireshark可以理解为是一个带图形界面的tcpdump，同时集成了非常多的协议解析插件，可以帮助我们方便的抓取和分析各种协议。</description>
    </item>
    
    <item>
      <title>top</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/top/</guid>
      <description>top 本文介绍 top 命令的常见例子！top 可以显示系统运行的进程和资源等情况的有用信息。
基础展示 top 上述命令将会显示：
 红色区域：系统的统计信息 蓝色区域：系统所有的进程列表信息  默认情况下，top 命令每隔 3 秒刷新一次。
 红色区域
 第一行展示的是：时间、电脑运行多久了、多少人登录着电脑、过去 1、5、15 分钟电脑的平均负载。 第二行展示的是，任务的总数量，以及各个状态的任务数量。 第三行展示的是 CPU 的一些信息。  CPU 信息的每一列的含义：
 us：用户态 CPU 占用处理器的总时间 sy：内核态 CPU 占用处理器的总时间 ni：使用手动设置的 nice 值执行进程所花费的时间。 id：CPU空闲时间的数量。 wa：CPU等待I/O完成所花费的时间。 hi：维护硬件中断所花费的时间。 si：维护软件中断所花费的时间。 st：由于运行虚拟机而损失的时间（“窃取时间”）。  第四行显示物理内存的总量（以kibibytes为单位），以及空闲、使用、缓冲或缓存的内存量。 第五行显示交换内存的总量（也以kibibytes为单位），以及空闲、使用和可用的内存量。后者包括预期可以从缓存中恢复的内存。
 蓝色区域的，进程列表中的各个列的信息如下：
 PID：进程ID。 USER：进程的所有者。 PR：流程优先级。 NI：这个过程很有价值。 VIRT：进程使用的虚拟内存量。VIRT = SWAP + RES。 RES：进程使用的常驻内存量。RES = CODE + DATA SHR：进程使用的共享内存量。 S： 进程的状态。（有关此字段可以采用的值，请参见下面的列表）。 %CPU：自上次更新以来进程使用的CPU时间的份额。按下 P 键，可以按照CPU 使用量从高到低对进程排序。 %MEM：使用的物理内存份额。按下 M 键，可以按照内存使用量从高到低对进程排序。 TIME+：任务使用的总CPU时间（以百分之一秒为单位）。 COMMAND：命令名或命令行（名称+选项）。  top 里面描述进程内存使用量的数据来源于 /proc/$pid/statm 这个文件。</description>
    </item>
    
    <item>
      <title>cat</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/cat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/cat/</guid>
      <description>cat cat 命令的常见用法！
查看文件内容 要使用 cat 显示文件的内容，只需传递要查看的一个或多个文件的名称。文件内容将打印到标准输出并在终端中可见。下面的示例假设文件foo.txt 文件只有一行“Hello World”。
cat foo.txt Hello world 如果文件的内容很长，则全部内容将写入终端。在这种情况下，很难找到文件的某些部分。在寻找特定内容时，grep 可能是一个更好的选择。
将一个文件的内容写入到另外一个文件 使用cat工具结合重定向，可以将文件内容写入新的文件。下面的示例假设文件foo.txt文件只有一行“Hello World”并将其写入bar.txt文件.
cat foo.txt &amp;gt; bar.txt cat bar.txt Hello world 如果 bar.txt 文件不存在，那么 cat 工具会自动创建 bar.txt 文件。
将一个文件的内容追加到另外一个文件 cat wine.txt &amp;gt;&amp;gt; beer.txt 多个文件合并为一个 cat *.txt &amp;gt; combined.txt 上述命令行，将当前目录以 .txt 结尾的文件，合并到 combined.txt 文件中。
cat 输出显示行号 -n 参数可以显示文件的行号：
cat -n /usr/share/dict/words 1 A 2 a 3 aa 4 aal 5 aalii 输出的每行行尾显示 $ 符号 cat -e test hello everyone, how do you do?</description>
    </item>
    
    <item>
      <title>os-release</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/os-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/os-release/</guid>
      <description>如何知道是 Ubuntu 还是 Cent OS 系统 ? $ cat /etc/os-release NAME=&amp;#34;Ubuntu&amp;#34; VERSION=&amp;#34;20.04.1 LTS (Focal Fossa)&amp;#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=&amp;#34;Ubuntu 20.04.1 LTS&amp;#34; VERSION_ID=&amp;#34;20.04&amp;#34; HOME_URL=&amp;#34;https://www.ubuntu.com/&amp;#34; SUPPORT_URL=&amp;#34;https://help.ubuntu.com/&amp;#34; BUG_REPORT_URL=&amp;#34;https://bugs.launchpad.net/ubuntu/&amp;#34; PRIVACY_POLICY_URL=&amp;#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;#34; VERSION_CODENAME=focal UBUNTU_CODENAME=focal </description>
    </item>
    
    <item>
      <title>sed</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/sed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/sed/</guid>
      <description>sed 简单替换 将每一个 Hello 替换为 hello ：
sed &amp;#39;s/Hello/hello/g&amp;#39; hello.txt &amp;gt; newHello.txt 通过加上 -i 即 in-place 可以在原地替换原文件：
sed -i &amp;#39;s/Hello/hello/g&amp;#39; hello.txt  有一个通用的 UNIX 原则，在进行重要的永久性改变之前，尽可能地事先预览结果。
 只对指定行操作 sed &amp;#39;5s/hello/Hello/g&amp;#39; sed &amp;#39;5,10s/hello/Hello/g&amp;#39; sed &amp;#39;$s/hello/Hello/g&amp;#39; sed &amp;#39;5,$s/hello/Hello/g&amp;#39; # 只处理包含 OK 的行 sed &amp;#39;/OK/s/hello/Hello/g&amp;#39; 特别长的 sed 命令 sed -i \ -e &amp;#39;s/mon/Monday/g&amp;#39; \ -e &amp;#39;s/tue/Tuesday/g&amp;#39; \ -e &amp;#39;s/wed/Wednesday/g&amp;#39; \ -e &amp;#39;s/thu/Thursday/g&amp;#39; \ -e &amp;#39;s/fri/Friday/g&amp;#39; \ -e &amp;#39;s/sat/Saturday/g&amp;#39; \ -e &amp;#39;s/sun/Sunday/g&amp;#39; \ calendar 面试题：打印文件的第 10-20 行 $ sed -n &amp;#39;10, 20p&amp;#39; input.</description>
    </item>
    
    <item>
      <title>perf</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/perf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/perf/</guid>
      <description>perf 内核版本需要 2.6.31 以上。
常用命令
 perf list perf stat perf top perf record perf report perf annotate  perf list 列出所有能够触发 perf 采样点的事件。perf 基本原理是对被检测对象进行采样，采样的方式很多，最简单的方式就是根据 tick 中断进行，还可以用 cache miss 事件触发进行采样。
perf stat 通过概况的方式提供被调试程序运行的整体情况、汇总数据。通过 perf stat 可以很快分析出这个程序是 CPU 密集型还是 IO 密集型，从而可以进行下一步优化。
perf top 实时显示当前系统的性能统计信息，找出当前系统最耗时的某个进程
perf record &amp;amp; perf report perf record 获取某个进程的采样信息，存到 perf.data 文件中，使用 perf report 来显示统计结果。perf record 记录单个函数级别的统计信息，可以定位到某个进程最耗时的函数。
perf record 最常用的选项是 -p 和 -g，-p 指定采样某个进程的信息，-g 生成函数的调用关系表。
perf annotate 读取 perf.data 显示注释的代码，查看程序中哪些代码的耗时比较长。</description>
    </item>
    
    <item>
      <title>Vim 手册</title>
      <link>https://kunzhao.org/docs/tutorial/unix-command/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/unix-command/vim/</guid>
      <description>Vim 手册  .: 重复上一次改变，比如 x 可以删除字符，那么 x.. 就可以连续删除三个字符。 u: undo changes dd: 删除当前行 &amp;gt;G: 当前行增加缩进  配置  :set number 显示行号，:set nonumber 除去行号  移动  $: 移动到行尾 f{char}: 在当前行寻找下一个 char 出现的位置，然后移动上去，同时 ; 可以重复上一次 f 命令搜索的字符，继续进行搜索，使用 , 可以反方向搜索 F{char}: 在当前行寻找上一个 char 出现的位置，然后移动上去 /pattern&amp;lt;CR&amp;gt;: 在整个文档寻找下一个出现的位置，n 继续，N 反方向 ?pattern&amp;lt;CR&amp;gt;: 在整个文档寻找上一个出现的位置，n 继续，N 反方向 /content: 搜索某个字符 %: 在匹配的括号之间来回跳转 zz: 让当前行显示在屏幕中间 10w: 向前移动 10 个 word 的距离 50j: 向下移动 50 行 10G 或者 :10: 跳转到第 10 行 gg 或者 1G 或者 :1 跳转到首行 G 或者 :$ 跳转到末尾   Ctrl + F: 移动到下一屏幕 Ctrl + B: 移动到上一屏幕 Ctrl + D: 下移半屏 Ctrl + U: 上移半屏  编辑  i: 改变到输入模式，光标前插入字符 a: 在当前光标的字符下一个位置追加字符 I: 当前行开头处插入数据 A: 在当前光标的行的末尾追加字符 o: 当前行下面插入一行 O: 当前行上面插入一行 s: 多个字符替换一个单个字符，进入 Insert 模式 r: 替换单个字符 x: 删除当前字符 X: 删除光标左侧的字符 D: 删除从当前光标到行末尾的所有字符 dd: 删除当前行 :lined 删除指定行 :line,lined 删除指定范围的行 d10w: 删除 10 个 word p: 缓冲区内容插入到光标之后 P: 缓冲区内容插入到光标前面 xp: 调换两个字符 ddp: 调换两行 ~: 改变字符大小写  Insert Mode:</description>
    </item>
    
  </channel>
</rss>
