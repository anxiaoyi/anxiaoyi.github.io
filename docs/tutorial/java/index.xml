<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java 教程 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/java/</link>
    <description>Recent content in Java 教程 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stream 编程</title>
      <link>https://kunzhao.org/docs/tutorial/java/stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/stream/</guid>
      <description>Stream 编程 String[] Stream Arrays.stream(lines.split(&amp;#34;\\s+&amp;#34;)) .map(String::toUpperCase) .toArray(String[]::new) Integer[] 或 int[] stream int[] num = {1, 2, 3, 4, 5}; Integer[] result = Arrays.stream(num) .map(x -&amp;gt; x * 2) .boxed() .toArray(Integer[]::new); int[]
Stream&amp;lt;Integer&amp;gt; stream = Stream.of(1, 2, 3, 4, 5); int[] result = stream.map2Int(x -&amp;gt; x).toArray(); lambda 引用外部变量  lambda 引用外部变量为什么必须声明为 final ?
 Local variables in Java have until now been immune to race conditions and visibility problems because they are accessible only to the thread executing the method in which they are declared.</description>
    </item>
    
    <item>
      <title>Java Date 和 Time</title>
      <link>https://kunzhao.org/docs/tutorial/java/date-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/date-time/</guid>
      <description>Java Date 和 Time 日期格式化为 yyyy-MM-dd Java 8 如下：
LocalDateTime ldt = LocalDateTime.now(); DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&amp;#39;yyyy-MM-dd&amp;#39;, Locale.ENGLISH); System.out.println(formatter.format(ldt)); </description>
    </item>
    
    <item>
      <title>Java 类加载</title>
      <link>https://kunzhao.org/docs/tutorial/java/classloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/classloader/</guid>
      <description>Java 类加载 类编译  .class 文件包含哪些信息 ?
 类加载的过程 参考：《深入理解 Java 虚拟机》
JVM 把 Class 文件加载到内存，然后进行校验、准备、解析、初始化，最终形成可以使用的 Java 类型，这就是类加载机制。其中，校验、准备、解析这三个阶段，放在一起是链接阶段。
 【加载】二进制字节流可以从 JAR、WAR、网络、运行时动态生成（动态代理）、JSP生成。 【验证】文件格式、元数据（信息语义）、字节码验证（类型转换是否有效、跳转指令不会跳到方法体以外的地方去）、符号引用验证。在同一个类中，如果同时出现多个名字相同且描述符也相同的方法，那么 Java 虚拟机会在此阶段报错。 【准备】static final 变量赋值、各个基本数据类型的默认值 【解析】常量池内的符号引用（用符号描述引用目标）替换为直接引用（直接指向目标的指针） 【初始化】编译器收集 static 块、类变量的赋值放到 () 方法中   符号引用存储在哪里
 在编译过程中，我们并不知道目标方法的具体内存地址。因此，Java 编译器会暂时用符号引用来表示该目标方法。符号引用存储在 class 文件的常量池之中。根据目标方法是否为接口方法，这些引用可分为接口符号引用和非接口符号引用。利用“javap -v”打印某个类的常量池。
加载器类型  Bootstrap ClassLoader：加载 JAVA_HOME/lib、或者 -Xbootclasspath，并且是按照名字识别的，如 rt.jar Extension ClassLoader：JAVA_HOME/lib/ext、或者 java.ext.dirs 系统变量 Application ClassLoader：加载用户 ClassPath 上的类库  类加载器之间的层次关系，称之为双亲委派模型。如果一个类收到类加载请求，那么会首先委派给父类，父类反馈无法完成，自己才进行加载。
何时初始化  遇到 new、getstatic、putstatic、invokestatic 这 4 条字节码指令。对应的是 new 一个对象、读取静态字段、设置静态字段（字段没有被 final 修饰，否则在编译器就已经将结果放在常量池了）、调用一个类的静态方法。 java.</description>
    </item>
    
    <item>
      <title>JUC 并发包</title>
      <link>https://kunzhao.org/docs/tutorial/java/juc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/juc/</guid>
      <description>JUC 并发包 线程安全  无状态对象（例如 Servlet）一定是线程安全的。 对于可能被多个线程访问的可变状态的变量，用锁来保护它。 不可变对象（所有 field 都是 final，this 指针没有逸出）一定是线程安全的。  Java 内存模型 (JMM) 在并发编程中，需要处理两个关键问题：线程之间如何通信及线程之间如何同步。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。
Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。
 线程之间共享程序的公共状态，通过写读内存中的公共状态进行隐式通信。 在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。  Java 线程之间的通信 由 Java 内存模型（本文简称为 JMM ）控制，JMM 决定一个线程对共享变量的写入何时对另一个线程可见。
本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。Java内存模型的抽象结构示意图如下:
JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 Java 程序员提供内存可见性保证。
由于 JVM 运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存(有些地方称为栈空间)，用于存储线程私有的数据，线程与主内存中的变量操作必须通过工作内存间接完成，主要过程是将变量从主内存拷贝的每个线程各自的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，如果存在两个线程同时对一个主内存中的实例对象的变量进行操作就有可能诱发线程安全问题。为了解决类似上述的问题，JVM定义了一组规则，通过这组规则来决定一个线程对共享变量的写入何时对另一个线程可见，这组规则也称为Java内存模型（即JMM），JMM是围绕着程序执行的原子性、有序性、可见性展开的，下面我们看看这三个特性。
可见性 可见性是怎么导致的: 是因为每个 CPU 都有自己的缓存导致的。可见性指的是当一个线程修改了某个共享变量的值，其他线程是否能够马上得知这个修改的值。
 禁止编译器/处理器重排序：JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。处理器重排序，是通过在生成指令序列时，插入内存屏障来保证可见性。 synchronized：当线程获取锁时会从主内存中获取共享变量的最新值，释放锁的时候会将共享变量同步到主内存中。从而，synchronized具有可见性。 volatile：通过在指令中添加 lock 指令，以实现内存可见性  原子性 原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响。 基本数据类型
JMM 定义了 8 种操作都是原子的，不可再分的。
 lock(锁定)：作用于主内存中的变量，它把一个变量标识为一个线程独占的状态； unlock(解锁):作用于主内存中的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定 read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便后面的load动作使用； load（载入）：作用于工作内存中的变量，它把read操作从主内存中得到的变量值放入工作内存中的变量副本 use（使用）：作用于工作内存中的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作； assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作； store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送给主内存中以便随后的write操作使用； write（操作）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。  上面一共有八条原子操作，其中六条可以满足基本数据类型的访问读写具备原子性，还剩下lock和unlock两条原子操作。</description>
    </item>
    
    <item>
      <title>Java IO</title>
      <link>https://kunzhao.org/docs/tutorial/java/java-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/java-io/</guid>
      <description>Java IO BIO ServerSocket 示例 { ExecutorService executor = Excutors.newFixedThreadPollExecutor(100);//线程池  ServerSocket serverSocket = new ServerSocket(); serverSocket.bind(8088); while(!Thread.currentThread.isInturrupted()){//主线程死循环等待新连接到来  Socket socket = serverSocket.accept(); executor.submit(new ConnectIOnHandler(socket));//为新的连接创建新的线程 } class ConnectIOnHandler extends Thread{ private Socket socket; public ConnectIOnHandler(Socket socket){ this.socket = socket; } public void run(){ while(!Thread.currentThread.isInturrupted()&amp;amp;&amp;amp;!socket.isClosed()){死循环处理读写事件 String someThing = socket.read()....//读取数据  if(someThing!=null){ ......//处理数据  socket.write()....//写数据  } } } } 这个模型最本质的问题在于，严重依赖于线程。但线程是很”贵”的资源，主要表现在：
   线程的创建和销毁成本很高，在Linux这样的操作系统中，线程本质上就是一个进程。创建和销毁都是重量级的系统函数。    线程本身占用较大内存，像Java的线程栈，一般至少分配512K～1M的空间，如果系统中的线程数过千，恐怕整个JVM的内存都会被吃掉一半。    线程的切换成本是很高的。操作系统发生线程切换的时候，需要保留线程的上下文，然后执行系统调用。如果线程数过高，可能执行线程切换的时间甚至会大于线程执行的时间，这时候带来的表现往往是系统load偏高、CPU sy使用率特别高（超过20%以上)，导致系统几乎陷入不可用的状态。    容易造成锯齿状的系统负载。因为系统负载是用活动线程数或CPU核心数，一旦线程数量高但外部网络环境不是很稳定，就很容易造成大量请求的结果同时返回，激活大量阻塞线程从而使系统负载压力过大。    同步调用示例 服务端响应之前，IO 会阻塞在：java.</description>
    </item>
    
    <item>
      <title>JVM</title>
      <link>https://kunzhao.org/docs/tutorial/java/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/jvm/</guid>
      <description>JVM 虚拟机内存模型 程序寄存器 pc register (program counter)： 一个包含当前时刻指令的地址的寄存器，程序寄存器区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域
虚拟机栈 栈会抛出两种异常：StackOverflowError 和 OutOfMemoryError，在 HotSpot 虚拟机栈中，可以使用参数 -Xss1M 来设置栈的大小为 1MB。随着调用函数参数的增加和局部变量的增加，单次函数调用对栈空间的需求也会增加，因此栈的最大递归次数不是一成不变的。函数嵌套调用的次数由栈的大小决定：栈越大，函数嵌套调用次数越多；对一个函数而言，它的参数越多，内部局部变量越多，它的栈帧就越大，其嵌套调用次数就会越少。
 局部变量表是存放方法参数和局部变量的区域。相对于类属性变量的准备阶段和初始化阶段来说，局部变量没有准备阶段，必须显式初始化。如果是非静态方法，则在 index [O] 位置上存储的是方法所属对象的实例引用，随后存储的是参数和局部变量。字节码指令中的 STORE 指令就是将操作栈申计算完成的局部变量写回局部变量表的存储空间内。 操作栈是一个初始状态为空的桶式结构栈。在方法执行过程中，会有各种指令往栈中写人和提取信息。 JVM 的执行引擎是基于栈的执行引擎，其中的栈指的就是操作栈。 每个栈中包含一个在常量池中对当前方法的引用 ， 目的是支持方法调用过程的动态连接。 方法执行时有两种退出情况。第一， 正常退出，即正常执行到任何方法的返回字节码指令 ， 如 RETURN 、 IRETURN 、 ARETURN 等，第二 ， 异常退出。无论何种退出情况，都将返回至方法当前被调用的位置。  本地方法栈 与 stack 一样，同样抛出两种异常：StackOverflowError 和 OutOfMemoryError。在 sun 的 HOT SPOT 虚拟机中，不区分本地方法栈和虚拟机栈。
元数据区 在 JDK7 及之前的版本中，只有 Hotspot 才有 Perm 区，译为永久代 ， 它在启动时固定大小，很难进行调优，并且 FGC 时会移动类元信息。在某些场景下，如果动态加载类过多，容易产生 Perm 区的 OOM 。为了解决该问题 ， 需要设定运行参数 -XX: MaxPermSize= 1280m ，如果部署到新机器上，往往会因为 NM 参数没有修改导致故障再现。</description>
    </item>
    
    <item>
      <title>JVM BOX</title>
      <link>https://kunzhao.org/docs/tutorial/java/jvmbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/jvmbox/</guid>
      <description>JVM 命令工具箱  在 Ubuntu 18.04 上验证
 切换 Java 版本 $ update-alternatives --config java JDK 命令无法执行 报错：
Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process: ptrace(PTRACE_ATTACH, ..) failed for 34131: Operation not permitted 解决方法：
# 把这个文件里面的值从 1 改为 0 即可 echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope  报错：
Exception in thread &amp;quot;main&amp;quot; java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at sun.tools.jinfo.JInfo.runTool(JInfo.java:108) at sun.tools.jinfo.JInfo.main(JInfo.java:76) Caused by: java.</description>
    </item>
    
    <item>
      <title>Java 基础</title>
      <link>https://kunzhao.org/docs/tutorial/java/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/basic/</guid>
      <description>Java 基础 8 种基础数据类型 缓存范围的包装类,在 VM options 加入参数-XX:AutoBoxCacheMax=7777,即可设置最大缓存值为 7777。
char 能存储中文字符吗 在 Java 中，char 类型占 2 个字节，而且 Java 默认采用 Unicode 编码，一个 Unicode 码是 16 位，所以一个 Unicode 码占两个字节，Java 中无论汉字还是英文字母都是用 Unicode 编码来表示的。所以，在Java中，char 类型变量可以存储一个中文汉字。
浮点数 单精度浮点数格式：
字符集 GB2312 收录 6763 个常用汉字；GBK 的 K 是扩展的意思，支持繁体，兼容 GB2312；GB18030 是国家标准，是 GBK 的超集并与之兼容；1994 年公布的 Unicode，编码格式有：UTF-8、UTF-16、UTF-32，UTF 可以理解为对 Unicode 的压缩方式。
访问权限 内部类和静态内部类 内部类有对外层类完全的访问权限。静态内部类没有一个指向嵌套类的引用，所以静态内部类不能够调用外层类的非静态方法，或者访问非静态的字段。
泛型 为什么类型擦除 为了兼容 JDK 5 之前（有泛型功能之前）的项目，否则有大量代码修改的工作。
//编译器的代码 Node node = new Node&amp;lt;String&amp;gt;(); //编译后的代码 Node node = new Node(); 反射 Class.</description>
    </item>
    
    <item>
      <title>BTrace</title>
      <link>https://kunzhao.org/docs/tutorial/java/btrace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/btrace/</guid>
      <description>BTrace  背景：程序出问题，线上机器 DEBUG 端口没有开，那段代码没有打印日志，重启会破坏现场，Review 又看不出来代码哪里有问题。
 java.lang.instrument.Instrumentation Instrumentation 可以让我们动态替换字节码：
 redifineClasses: 重新定义 class，自己提供字节码文件替换掉已经存在的 class 文件 retransformClasses: 修改 class，在已经存在的字节码文件上修改后再替换之  BTrace 架构  BTrace 脚本：利用 BTrace 提供的注解，方便我们开发脚本。 Compiler：将 BTrace 脚本编译成 BTrace class 文件。 Client：将 class 文件发送到 Agent。 Agent：基于 Java 的 Attach Api，Agent 可以动态附着到一个运行的 JVM 上，然后开启一个 BTrace Server，接受 client 发过来的 BTrace 脚本；解析脚本，然后根据规则找到修改的类，修改字节码后，调用 Java 的 Instrument 的 reTransform 接口，完成对对象行为的修改并使之生效。  BTrace 工作流程如下：
BTrace 借助 Instruments 实现 class 的替换。Instruments 存在诸多限制，BTrace 也不例外：
 不允许创建对象 不允许创建数组 不允许抛异常 不允许 catch 异常 不允许随意调用其他对象或者类的方法，只允许调用 com.</description>
    </item>
    
    <item>
      <title>Java 集合类</title>
      <link>https://kunzhao.org/docs/tutorial/java/java-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/java-collection/</guid>
      <description>Java 集合类 Collections 框架图 List 框架图 Set 框架图 Map 框架图 Queue 框架图 HashMap  并发下的 HashMap 会有哪些安全问题？
 这里我只是简单的说了写覆盖跟不可重复读（联想到数据库了），面试官就放我过了。
 添加元素时头插还是尾插？
 1.7 头插，1.8 尾插。
数组长度为什么必须是 2 的指数幂 减少哈希冲突，均匀分布元素。
1）通过将 Key 的 hash 值与 length-1 进行 &amp;amp; 运算，实现了当前 Key 的定位，2 的幂次方可以减少冲突（碰撞）的次数，提高 HashMap 查询效率；
2）如果 length 为 2 的次幂，则 length-1 转化为二进制必定是 11111…… 的形式，在于 h 的二进制与操作效率会非常的快，而且空间不浪费；如果 length 不是 2 的次幂，比如 length 为 15，则 length-1 为 14，对应的二进制为 1110，在于 h 与操作，最后一位都为 0，而 0001，0011，0101，1001，1011，0111，1101 这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率！这样就会造成空间的浪费。</description>
    </item>
    
    <item>
      <title>多线程并发示例</title>
      <link>https://kunzhao.org/docs/tutorial/java/concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/java/concurrency/</guid>
      <description>多线程并发 模拟避免死锁的哲学家进餐问题  来自 《Cracking Coding Interview 6th Programming》
 筷子：
class Chopstick { private Lock lock; public Chopstick() { lock = new ReentrantLock(); } public void pickUp() { lock.lock(); } public void putDown() { lock.unlock(); } } 哲学家：
class Philosopher extends Thread { private int bites = 10; private Chopstick left, right; public Philosopher(Chopstick left, Chopstick right) { this.left = left; this.right = right; } public void eat() { pickUp(); chew(); putDown(); } public void pickUp() { left.</description>
    </item>
    
  </channel>
</rss>
