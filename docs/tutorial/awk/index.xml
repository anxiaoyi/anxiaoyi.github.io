<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWK 教程 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/awk/</link>
    <description>Recent content in AWK 教程 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://kunzhao.org/docs/tutorial/awk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>简介</title>
      <link>https://kunzhao.org/docs/tutorial/awk/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/awk/intro/</guid>
      <description>简介 AWK 是一门编程语言。
开始 假设您有一个名称为 emp.data 文件，里面存储的内容包含姓名、每小时的薪资、工作的小时，如下所示：
Beth 4.00 0Dan 3.75 0Kathy 4.00 10Mark 5.00 20Mary 5.50 22Susie 4.25 18现在你想要打印工作超过 0 小时的员工的姓名和薪资，对于 AWK 而言，这相当简单：
awk `$3 &amp;gt; 0 { print $1, $2 * $3 }` emp.data 你会得到如下输出：
Kathy 40Mark 100Mary 121Susie 76.5位于引号中的内容就是 AWK 的完整代码。$3 &amp;gt; 0，会匹配文件的每一行，看这每一行的第 3 列是否大于 0。{ print $1, $2 * $3 } 打印第一列，以及第二列和第三列的乘积。
如果你想要打印出工作小时数是 0 的员工姓名：
awk `$3 == 0 { print $1 }` emp.</description>
    </item>
    
    <item>
      <title>Patterns</title>
      <link>https://kunzhao.org/docs/tutorial/awk/patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/awk/patterns/</guid>
      <description>Patterns Patterns 控制是否执行 actions，只有当 pattern 匹配的时候，才会执行 action。
本文介绍六种常用的 pattern：
 BEGIN { statements }：所有行处理之前执行一次 BEGIN END { statements }：所有行处理完了执行一次 END expression { statements }：普通的表达式 /正则表达式/ { statements }：匹配正则 组合表达式 { statements }：使用 &amp;amp;&amp;amp; 或 || 或 ! 进行组合 pattern1, pattern2 { statements }：范围匹配  BEGIN 和 END BEGIN 和 END 只会执行一次，BEGIN 是在开始执行前执行，END 是在结束前执行。
一种常见的使用 BEGIN 的用法是改变默认的列分割符，列分割符默认被一个内置变量 FS 所控制，这个变量的默认值是空格或者tabs。如下示例在 BEGIN 中设置了 FS 为 \t，同时打印了表头。在 END 块中打印了面积和人口的总和。
BEGIN { FS = &amp;#34;\t&amp;#34; printf(&amp;#34;%10s %6s %5s %s\n\n&amp;#34;, &amp;#34;COUNTRY&amp;#34;, &amp;#34;AREA&amp;#34;, &amp;#34;POP&amp;#34;, &amp;#34;CONTINENT&amp;#34;) } { printf(&amp;#34;%10s %6d %5d %s\n&amp;#34;, $1, $2, $3, $4) area = area + $2 pop = pop + $3 } END { printf(&amp;#34;\n%10s %6d %5d\n&amp;#34;, &amp;#34;TOTAL&amp;#34;, area, pop) } expression 表达式示例：</description>
    </item>
    
  </channel>
</rss>