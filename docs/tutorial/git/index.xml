<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git 教程 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/git/</link>
    <description>Recent content in Git 教程 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://kunzhao.org/docs/tutorial/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git 配置用户名和邮箱</title>
      <link>https://kunzhao.org/docs/tutorial/git/config-user-and-email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/config-user-and-email/</guid>
      <description>Git 配置用户名和邮箱 假设你的用户名是 zk，邮箱账号是 xxx@163.com，那么需要提前配置 Git 的用户名和邮箱帐号：
git config --global user.name &amp;#34;zk&amp;#34; git config --global user.email &amp;#34;xxx@163.com&amp;#34; Git 需要知道谁对代码做出了变更，对代码做出变更的这个人的邮件联系方式是什么，以方便追踪。
Git Config 有三个作用域：
 git config --local：只对某个仓库有效 git config --global：对当前用户所有仓库有效 git config --system：对系统所有登录的用户有效  如何查看当前设置的 Git 配置？
git config --list --local git config --list --global git config --list --system  --local 针对的是某个仓库，配置 --local 作用域的时候，需要进入到项目所在的目录才能配置或显示。
 </description>
    </item>
    
    <item>
      <title>创建 Git 仓库</title>
      <link>https://kunzhao.org/docs/tutorial/git/create-repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/create-repository/</guid>
      <description>创建 Git 仓库 （1）已有项目使用 Git 管理
假设你的项目所在文件夹叫做：abc_project
cd abc_project git init （2）新建项目直接使用 Git 管理
假设新建的项目名为 xxx_project
git init xxx_project </description>
    </item>
    
    <item>
      <title>Git 查看文件差异</title>
      <link>https://kunzhao.org/docs/tutorial/git/check-file-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/check-file-diff/</guid>
      <description>Git 查看文件差异 Git 三个区 Git 有三个区：工作区、Stage 区（暂存区）、版本库。这意味着，一个文件可能在这三个区都有所不同。如下图所示，一个文件使用 git add 命令之后，这个文件就转移到了暂存区，继续使用 git commit 之后就转移到了版本库。git diff 使用不同的命令参数可以查看文件在这三个区域中的两两对比的差异。
本地代码（工作区）与暂存区中的差异 git diff 示例结果如下所示：
diff 输出的格式介绍 下面解释上述 git diff 输出的格式：
 第一行，展示了使用什么命令做的比较 第二行，100644 代表这是一个普通文件 --- 表示原始文件，即这个文件没有修改前的内容 +++ 表示新文件，即这个文件修改后的内容 -1,5 中的 - 表示原始文件，1,5 表示从第 1 行到第 4 行做了改动 +1,5 中的 + 表示新文件，1,5 表示从第 1 行到第 4 行做了改动 @@ -1,5 +1,5 @@ 表示这个文件的第 1 行到第 4 行，变更为了新文件的第 1 行到第 4 行  本地代码（工作区）和版本库的差异 git diff HEAD  HEAD 指：当前工作分支的版本库</description>
    </item>
    
    <item>
      <title>Git 重置</title>
      <link>https://kunzhao.org/docs/tutorial/git/git-reset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/git-reset/</guid>
      <description>Git 重置 git reset 命令是 Git 最危险最容易误用的命令之一！一定要慎用，要清除地知道你自己在做什么！
Git reset 命令格式 git reset [--soft | --mixed | --hard] [&amp;lt;commit&amp;gt;] Git 提交历史记录 cat .git/refs/heads/master 显示的就是当前版本库的最新的 commitid
Git 重置与版本变化关系图 上述图，
 1 代表更新引用指向，即引用指向新的 commit 2 代表暂存区的内容与版本库保持一致 3 代表工作区的内容与暂存区保持一致  使用不同的参数，执行的操作不一样：
 --hard 参数，上图 1、2、3 这三步全部执行 --soft 参数，上图 1 执行 --mixed 参数，上图 1、2 执行 不使用参数，等同于使用了 --mixed 参数  根据上述解释，我们来看几个例子：
彻底回退到上一次提交 git reset --hard HEAD^  HEAD^ 指：HEAD 的父提交，即上一次提交。注意 --hard 选项会将本地工作区的内容也恢复为上一次提交，且不可恢复，所以此命令慎用！！！
 彻底回退到某一次 commit 根据 commit id 回退到某一次的提交：</description>
    </item>
    
    <item>
      <title>Git checkout</title>
      <link>https://kunzhao.org/docs/tutorial/git/git-checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/git-checkout/</guid>
      <description>Git checkout git checkout 检出命令，可以用来切换分支、查看某个 commit 的代码等。
detached HEAD 当你执行 git checkout [commitId] 时，你会看到下面的文件警告：
Note: switching to &#39;467dd6520&#39;. You are in &#39;detached HEAD&#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -c with the switch command.</description>
    </item>
    
    <item>
      <title>Git 保存当前进度</title>
      <link>https://kunzhao.org/docs/tutorial/git/git-stash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/git-stash/</guid>
      <description>Git 保存当前进度 git stash 命令可以帮助我们保存和恢复日常的工作进度。
应用场景 你正在 dev 分支上开发项目的某个新功能，开发到一半的时候，master 分支的代码（线上正在运行的代码）出现了一个 bug，需要紧急修复。你现在需要从 dev 分支切换到 master 分支修 BUG，而你现在在 dev 分支正在开发的代码也不可能开发到一半就要 push 上去，此时就可以先在 dev 分支把代码给 stash 起来，也就是暂存起来，然后再切换到 master 分支。等 master 分支修复好了后，再切回 dev 分支，执行 stash pop 把这部分代码给恢复出来即可。
下面示例几个基础用法：
保存当前工作进度 git stash 显示进度列表 git stash list stash 就是一个栈数据结构管理的，你可以保存多次工作进度，并且恢复的时候也可以选择恢复哪个。
恢复进度 # 恢复最新保存的工作进度，并将工作进度从 stash 列表中清除 git stash pop # 恢复某个指定的 stash (git stash list 可以看到) git stash pop [&amp;lt;stash&amp;gt;] 命令 git stash apply [&amp;lt;stash&amp;gt;] 同 git stash pop，只是不会从 stash 列表中删除恢复的进度。</description>
    </item>
    
    <item>
      <title>Git 多次提交合并成一次提交</title>
      <link>https://kunzhao.org/docs/tutorial/git/merge-multiple-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/git/merge-multiple-commit/</guid>
      <description>Git 多次提交合并成一次提交 你在 dev 分支上开发某个功能，在本地执行了三次 commit，注意这三次 commit 都没有 push 到远程分支，都只是在本地存在。现在你想要在 push 之前，将你本地的这多个 commit 合并成一个 commit，请问应该怎么做？
答案是：git rebase -i HEAD~N，N 代表你想把最近的几条 commitId 记录合并。具体操作步骤如下：
查看提交记录 git log 查看提交记录：
871adf OK, feature Z is fully implemented --- newer commit --┐ 0c3317 Whoops, not yet... | 87871a I&#39;m ready! | 643d0e Code cleanup |-- Join these into one afb581 Fix this and that | 4e9baa Cool implementation | d94e78 Prepare the workbench for feature Z -------------------┘ 6394dc Feature Y --- older commit  假设 6394dc 提交已经 push 上去了 你现在想把 d94e78 ~ 871adf 这几个 commit 合并一下  即最终你再次执行 git log 想要看到的效果如下：</description>
    </item>
    
  </channel>
</rss>