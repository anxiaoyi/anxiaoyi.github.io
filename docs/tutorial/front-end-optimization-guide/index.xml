<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端优化指南 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/front-end-optimization-guide/</link>
    <description>Recent content in 前端优化指南 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://kunzhao.org/docs/tutorial/front-end-optimization-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图片优化</title>
      <link>https://kunzhao.org/docs/tutorial/front-end-optimization-guide/image-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/front-end-optimization-guide/image-optimization/</guid>
      <description>图片优化 图片在网页数据的传输中占据了非常大的流量，如何优化图片，对于前端页面加载的性能极其重要。本文讲述了比较常见的几种优化图片的技巧。
图片格式介绍 （1）JPEG
JPEG 是 Joint Photographic Experts Group 的缩写，不支持透明度，常用于网站的 Banner 图。JPEG 使用的是一种有损图像质量的压缩算法，压缩的越狠，图片的质量损失也就越大，图片的尺寸也就越小。根据你网站所能忍受的图片质量，来相应的选择压缩比：
（2）PNG
支持透明度，支持无损压缩，一般图片的尺寸都比较大。
（3）GIF
适合放动画图片。
（4）WebP
🔥Google 2010 年提出的新的图像压缩格式算法，在 2013 年又推出 Animated WebP，即支持动画的 Webp。优点：更优的图像数据压缩算法、拥有肉眼识别无差异的图像质量、具备了无损和有损的压缩模式、Alpha 透明以及动画的特性。
PNG、JPG、WebP 压缩对比：
GIF 和 WebP 对比：
不同网络环境，加载不同尺寸图片 如下是京东网站首页占据 C 位的宣传图：
它的 URL 地址如下，你任意改变这张图片的 URL 里面的宽、高，放到浏览器里面重新进行请求，就可以得到相应大小的图片：
响应式图片 不同平台设备加载不同大小、甚至不同内容的图片！
CSS 媒体查询 @media all and (max-width: 600px) { img { width: 300px; } } @media all and (min-width: 600px) and (max-width: 1200px) { img { width: 900px; } } srcset、sizes、picture 和 source （1）srcset 属性</description>
    </item>
    
    <item>
      <title>HTML 优化</title>
      <link>https://kunzhao.org/docs/tutorial/front-end-optimization-guide/html-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/front-end-optimization-guide/html-optimization/</guid>
      <description>HTML 优化 本文通过一些案例讲述了常见的优化 HTML 的几种小技巧：减少 DOM 树、精简 HTML 文件大小等。
优化 DOM 节点树 去除页面除首屏外的对于用户不可见的信息区块，可以让页面的 DOM 节点数更少，DOM 树结构更简单，然后再使用懒加载异步化请求，去动态加载这些不可见的信息区块。
在《大型网站性能优化实战》这本书中，作者为了优化搜索页面的渲染瓶颈问题，将首屏以下的 33 各搜索结果对应的 HTML 代码放到 &amp;lt;textarea&amp;gt; 节点中，当该区域处于可见状态时，再从 TextArea 中取出 HTML 代码，恢复到 DOM 树中进行渲染。这样一来，页面首次渲染的 DOM 树所包含的节点数大幅度减少，从而有效提高了首次渲染速度。
多个空格合并为一个空格 通过将多个空格合并为一个空格，可以减少 HTML 的大小，从而缩短传输 HTML 文件所需的时间。通常在编写 HTML 文件的时候，总是倾向于格式化它，以方便我们人类阅读，所以这个文件中填充了许多空格，但这些空格对于浏览器来说是用不到的。在替换空格的时候，需要保留 &amp;lt;pre&amp;gt;、&amp;lt;textarea&amp;gt;、&amp;lt;script&amp;gt;、&amp;lt;style&amp;gt; 中的空格。
不过，如果你的网页中使用了 white-space: pre 这个 CSS 属性就要小心了，这个属性可以避免让多个空格压缩为一个，在实际开发网站的时候，其实也很少用到这个属性。如果确实需要，那么就放弃把 HTML 的多个空格合并为一个空格吧。
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, world! &amp;lt;/title&amp;gt; &amp;lt;script&amp;gt; var x = &amp;#39;Hello, world!&amp;#39;;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; Hello, World! &amp;lt;pre&amp;gt; Hello, World! &amp;lt;/pre&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 转为：</description>
    </item>
    
  </channel>
</rss>