<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue.js 教程 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/vue3/</link>
    <description>Recent content in Vue.js 教程 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://kunzhao.org/docs/tutorial/vue3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>createApp</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/createapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/createapp/</guid>
      <description>createApp 一个简单的计数器例子 创建渲染器 挂载 App 上下文 // apiCreateApp.ts export function createAppContext(): AppContext { return { app: null as any, config: { isNativeTag: NO, performance: false, globalProperties: {}, optionMergeStrategies: {}, isCustomElement: NO, errorHandler: undefined, warnHandler: undefined }, mixins: [], components: {}, directives: {}, provides: Object.create(null) } } </description>
    </item>
    
    <item>
      <title>生命周期</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/lifecycle/</guid>
      <description>生命周期  init: 在实例开始初始化时同步调用。此时数据观测、事件等都尚未初始化。 2.0 中更名为 beforeCreate。 created ：在实例创建之后调用。此时已完成数据绑定、事件方法，但尚未开始 DOM 编译，即未挂载到 document 中。 beforeCompile: 在 DOM 编译前调用。 2.0 废弃了该方法，推荐使用 created。 beforeMount: 2.0 新增的生命周期钩子，在 mounted 之前运行。 compiled: 在编译结束时调用。此时所有指令已生效，数据变化已能触发 DOM 更新，但不保证 $el 已插入文档。 2.0 中更名为 mounted。 ready ：在编译结束和 $el 第一次插入文档之后调用。 2.0 废弃了该方法，推荐使用 mounted。这个变化其实已经改变了ready这个生命周期状态，相当于取消了在$el首次插入文档后的钩子函数。 attached ：在 vm.$el 插入 DOM 时调用， ready 会在第一次 attached 后调用。操作 $el 必须使用指令或实例方法（例如 $appendTo()），直接操作 vm.$el 不会触发这个钩子。 2.0 废弃了该方法，推荐在其他钩子中自定义方法检查是否已挂载。 detached: 同 attached 类似，该钩子在 vm.$el 从 DOM 删除时调用，而且必须是指令或实例方法。 2.0 中同样废弃了该方法。 beforeDestroy: 在开始销毁实例时调用，此刻实例仍然有效。 destroyed: 在实例被销毁之后调用。此时所有绑定和实例指令都已经解绑，子实例也被销毁。 beforeUpdate: 2.</description>
    </item>
    
    <item>
      <title>计算属性</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/computed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/computed/</guid>
      <description>计算属性 基础用法 var vm = new Vue({ el: &amp;#39;#app&amp;#39;, data: { firstName: &amp;#39;Gavin&amp;#39;， lastName: &amp;#39;CLY&amp;#39; } computed: { fullName: function() { // this 指向 vm 实例 	return this.firstName + &amp;#39; &amp;#39; + this.lastName } } }); HTML 代码：
&amp;lt;p&amp;gt;{{ firstName }}&amp;lt;/p&amp;gt; // Gavin &amp;lt;p&amp;gt;{{ lastName }}&amp;lt;/p&amp;gt; // CLY &amp;lt;p&amp;gt;{{ fullName }}&amp;lt;/p&amp;gt; // Gavin CLY Setter 用法 var vm = new Vue({ el: &amp;#39;#el&amp;#39;, data: { cents: 100， } computed: { price: { set: function(newValue) { this.</description>
    </item>
    
    <item>
      <title>v-if 和 v-show</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/v-if-v-show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/v-if-v-show/</guid>
      <description>v-if 和 v-show 当 v-if 和 v-show 的条件发生变化时， v-if 引起了 dom 操作级别的变化，而 v-show 仅发生了样式的变化，从切换的角度考虑， v-show 消耗的性能要比 v-if 小。
除此之外， v-if 切换时， Vue.js 会有一个局部编译 / 卸载的过程，因为 v-if 中的模板也可能包括数据绑定或子组件。 v-if 会确保条件块在切换当中适当地销毁与中间内部的事件监听器和子组件。而且 v-if是惰性的，如果在初始条件为假时， v-if 本身什么都不会做，而v-show 则仍会进行正常的操作，然后把 css 样式设置为 display:none。
所以，总的来说， v-if 有更高的切换消耗，而 v-show 有更高的初始渲染消耗，我们需要根据实际的使用场景来选择合适的指令。</description>
    </item>
    
    <item>
      <title>在 IE 11 运行</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/run-vue-on-ie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/run-vue-on-ie/</guid>
      <description>在 IE 11 运行 npm install babel-loader @babel/polyfill --save 然后在 main.js 的最顶部加入下面这句话：
import &amp;#39;@babel/polyfill&amp;#39; </description>
    </item>
    
    <item>
      <title>JavaScript String 转为 Boolean</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/string-to-boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/string-to-boolean/</guid>
      <description>JavaScript String 转为 Boolean 正确的方法：
let isTrue = (myValue === &amp;#39;true&amp;#39;) 注意如下写法的结果，两个结果都是 true：
let myBool = Boolean(&amp;#39;false&amp;#39;) // true let myBool = !!&amp;#34;false&amp;#34;; // true </description>
    </item>
    
    <item>
      <title>JavaScript 模板字符串</title>
      <link>https://kunzhao.org/docs/tutorial/vue3/js-template-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/vue3/js-template-string/</guid>
      <description>JavaScript 模板字符串 `string text` `string text ${expression}string text` </description>
    </item>
    
  </channel>
</rss>