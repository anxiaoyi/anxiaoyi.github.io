<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/technique/</link>
    <description>Recent content in 技术 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/technique/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes</title>
      <link>https://kunzhao.org/docs/tutorial/technique/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/technique/k8s/</guid>
      <description>Kubernetes Kubernetes 发音 /Koo-ber-nay-tace/ 或者 /Koo-ber-netties/ 。
解决的问题 微服务部署和配置困难。
 简化应用程序的部署。开发者无须知道背后有多少台机器需要部署，也无需知道自己的 APP 运行在哪几台机器上。 对于资源的更为高效的利用。K8S 可以在任意时刻将 APP 迁移到其他 worker 节点上，以便更好的利用资源。 健康检查。node 挂掉后，自动将 APP 调度到其他节点上。 自动伸缩。K8S 可以自己关注资源的利用率，动态调整 APP 的实例数量。  概念解释 VM 和容器 APP 运行在 VM 中  APP 运行在容器中   K8S 运行 APP 开发者告诉 K8S 的 master 节点，哪些 APP 必须部署在一起，每一个 APP 需要部署几个实例，K8S 就会自动按照要求将这些 APP 部署到 worker 节点上。
K8S 由 master 和 worker 节点构成，其中 K8S 管理控制台位于 master 节点上，可以通过此平台管理整个 K8S 系统；而 worker 节点用于实际运行 APP。</description>
    </item>
    
    <item>
      <title>Kubernetes Patterns</title>
      <link>https://kunzhao.org/docs/tutorial/technique/k8s-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/technique/k8s-patterns/</guid>
      <description>Kubernetes Patterns 简介 创建好的云原生应用所需要的技能：
 Domain-Driven Design：从为了使架构更加贴切现实世界的业务视角来去进行软件设计。 微服务架构：提供了设计分布式应用的一系列准则甚至标准。 容器：打包和运行分布式应用的标准。  程序员在 Kubernetes 中可用的资源：
可预测的需求 你应该怎样声明你应用程序需要哪些 runtime 依赖、资源需求？
磁盘 容器文件系统是临时的，容器关闭的时候就消失了；Kubernetes 提供了 Pod 级别的存储：volume。如果应用需要比 Pod 级别更长生命周期的存储机制，那么需要使用 volumnes 来主动声明：
apiVersion: v1 kind: Pod metadata: name: random-generator spec: containers: - image: k8spatterns/random-generator:1.0 name: random-generator volumeMounts: - mountPath: &amp;#34;/logs&amp;#34; name: log-volume volumes: - name: log-volume persistentVolumeClaim: claimName: random-generator-log 参数配置 apiVersion: v1 kind: Pod metadata: name: random-generator spec: containers: - image: k8spatterns/random-generator:1.0 name: random-generator env: - name: PATTERN valueFrom: configMapKeyRef: name: random-generator-config key: pattern 资源限制 apiVersion: v1 kind: Pod metadata: name: random-generator spec: containers: - image: k8spatterns/random-generator:1.</description>
    </item>
    
  </channel>
</rss>
