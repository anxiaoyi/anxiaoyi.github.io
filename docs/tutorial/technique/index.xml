<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/technique/</link>
    <description>Recent content in 技术 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/technique/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes</title>
      <link>https://kunzhao.org/docs/tutorial/technique/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/technique/k8s/</guid>
      <description>Kubernetes Kubernetes 发音 /Koo-ber-nay-tace/ 或者 /Koo-ber-netties/ 。
解决的问题 微服务部署和配置困难。
 简化应用程序的部署。开发者无须知道背后有多少台机器需要部署，也无需知道自己的 APP 运行在哪几台机器上。 对于资源的更为高效的利用。K8S 可以在任意时刻将 APP 迁移到其他 worker 节点上，以便更好的利用资源。 健康检查。node 挂掉后，自动将 APP 调度到其他节点上。 自动伸缩。K8S 可以自己关注资源的利用率，动态调整 APP 的实例数量。  概念解释 VM 和容器 APP 运行在 VM 中  APP 运行在容器中   Pod 一个 Pod 是一组互相协作的容器构成的，一般情况下，一个 Pod 仅包含一个容器：
容器设计初衷就是为了一个容器仅运行一个进程的理念去运行程序，如果运行多个，那么它们的状态、生命周期、日志等都难以管理。所以，我们需要站在更高层级来去管理、组织、单元化分布在多个容器中的多个进程，这就是引入 Pod 的意义。Pod 来去给一组容器中的各个进程提供一种假象，让这些进程认为各自都运行在一个容器里似的，同时在需要隔离的时候，也能提供隔离的能力。
运行在相同 Pod 中的各个容器，它们的 IP 和端口资源是共享的，所以不要让它们引起端口冲突。Pod 是轻量级的，应该将一个应用程序分为多个 Pod，而不是在一个 Pod 中塞入所有东西。仅当这些进程是互相协作、必须同时运行、必须同时扩展、对外是一个整体服务等这种情况下，可以考虑将多个容器放在一个 Pod 中进行管理。
使用 cubectl create 来创建一个 Pod：
$ kubectl create -f kubia-manual.</description>
    </item>
    
    <item>
      <title>Kubernetes Patterns</title>
      <link>https://kunzhao.org/docs/tutorial/technique/k8s-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/technique/k8s-patterns/</guid>
      <description>Kubernetes Patterns 简介 创建好的云原生应用所需要的技能：
 Domain-Driven Design：从为了使架构更加贴切现实世界的业务视角来去进行软件设计。 微服务架构：提供了设计分布式应用的一系列准则甚至标准。 容器：打包和运行分布式应用的标准。  程序员在 Kubernetes 中可用的资源：
可预测的需求 你应该怎样声明你应用程序需要哪些 runtime 依赖、资源需求？
磁盘 容器文件系统是临时的，容器关闭的时候就消失了；Kubernetes 提供了 Pod 级别的存储：volume。如果应用需要比 Pod 级别更长生命周期的存储机制，那么需要使用 volumnes 来主动声明：
apiVersion: v1 kind: Pod metadata: name: random-generator spec: containers: - image: k8spatterns/random-generator:1.0 name: random-generator volumeMounts: - mountPath: &amp;#34;/logs&amp;#34; name: log-volume volumes: - name: log-volume persistentVolumeClaim: claimName: random-generator-log 参数配置 apiVersion: v1 kind: Pod metadata: name: random-generator spec: containers: - image: k8spatterns/random-generator:1.0 name: random-generator env: - name: PATTERN valueFrom: configMapKeyRef: name: random-generator-config key: pattern 资源限制 apiVersion: v1 kind: Pod metadata: name: random-generator spec: containers: - image: k8spatterns/random-generator:1.</description>
    </item>
    
    <item>
      <title>Istio</title>
      <link>https://kunzhao.org/docs/tutorial/technique/istio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/technique/istio/</guid>
      <description>Istio 依据CNCF基金会（Cloud-Native Computing Foundation）的定义，云原生是对在现代的动态环境下（比如云计算的三大场景：公有云、私有云及混合云）可用来构建并运行可扩展应用的技术的总称；服务网格则是云原生技术的典型代表之一，其他技术还包括容器、微服务、不可变基础设施、声明式 API 等。
Istio Istio 是一个与 Kubernetes 紧密结合的适用于云原生场景的 Service Mesh 形态的用于服务治理的开放平台。任何服务，只要服务间有访问，如果需要对服务间的访问进行管理，就可以使用 Istio。根据 Istio 官方的介绍，服务治理涉及连接（Connect）、安全（Secure）、策略执行（Control）和可观察性（Observe）。
Istio 采用了与 Kubernetes 类似的语法风格。
Kubernetes 本身是支持微服务的架构，在 Pod 中部署微服务很合适，也已经解决了微服务的互访互通问题，但对服务间访问的管理如服务的熔断、限流、动态路由、调用链追踪等都不在 Kubernetes 的能力范围内。那么，如何提供一套从底层的负载部署运行到上层的服务访问治理端到端的解决方案？目前，最完美的答案就是在 Kubernetes 上叠加 Istio 这个好帮手。
Istio、微服务、容器与 Kubernetes 的关系：
参考  云原生服务网格Istio：原理、实践、架构与源码解析  </description>
    </item>
    
  </channel>
</rss>
