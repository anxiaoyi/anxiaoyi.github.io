<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/algorithm/</link>
    <description>Recent content in 算法 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>回溯法</title>
      <link>https://kunzhao.org/docs/tutorial/algorithm/backtracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/algorithm/backtracking/</guid>
      <description>回溯法 回溯法的套路解法在这篇文章中给了详细的说明。
Subsets 返回一个数组的所有 subsets:
Input: nums = [1,2,3] Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] 解法：
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; subsets(int[] nums) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); Arrays.sort(nums); backtrack(list, new ArrayList&amp;lt;&amp;gt;(), nums, 0); return list; } private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list , List&amp;lt;Integer&amp;gt; tempList, int [] nums, int start){ list.add(new ArrayList&amp;lt;&amp;gt;(tempList)); for(int i = start; i &amp;lt; nums.length; i++){ tempList.add(nums[i]); backtrack(list, tempList, nums, i + 1); tempList.remove(tempList.size() - 1); } } 如果这个数组中有重复的数字，那么下面算法展示的是去掉重复数字的写法：
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; subsetsWithDup(int[] nums) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); Arrays.</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://kunzhao.org/docs/tutorial/algorithm/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/algorithm/array/</guid>
      <description>数组 无序数组第 K 大的数字 public int findKthLargest(int[] nums, int k) { k = nums.length - k; // 1 2 3 4 5 6  // ↑(第 2 大)  // ↑(partition = 2 的时候，实际上指向的是这里)  int lo = 0; int hi = nums.length - 1; // ==========================  // while (lo &amp;lt; hi)  // nums = [1]，这种情况进入不了循环  //  // ==========================  while (lo &amp;lt;= hi) { int index = partition(nums, lo, hi); if (index == k) { return nums[index]; } else if (index &amp;lt; k) { lo = index + 1; } else { hi = index - 1; } } return -1; } private int partition(int[] nums, int lo, int high) { int i = lo - 1; int pivot = nums[high]; for (int j = lo; j &amp;lt;= high - 1; j++) { if (nums[j] &amp;lt;= pivot) { i++; swap(nums, i, j); } } swap(nums, i + 1, high); return i + 1; } private void swap(int[] array, int i, int j) { int temp = array[i]; array[i] = array[j]; array[j] = temp; } 过半数的元素 使用**摩尔投票法**：</description>
    </item>
    
    <item>
      <title>树</title>
      <link>https://kunzhao.org/docs/tutorial/algorithm/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/algorithm/tree/</guid>
      <description>树 BST 第 K 大的数字  二叉搜索树的中序遍历为递增序列。因此这道题可转化为求 “此树的中序遍历倒序的第 k 个节点”。
 class Solution { int res, k; public int kthLargest(TreeNode root, int k) { this.k = k; dfs(root); return res; } void dfs(TreeNode root) { if (root == null) return; dfs(root.right); if (k == 0) return; if (--k == 0) res = root.val; dfs(root.left); } } 时间复杂度：O(N)，空间复杂度：O(N)，当树退化为链表（全部是右节点）的时候，系统使用 O(N) 大小的栈空间。</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://kunzhao.org/docs/tutorial/algorithm/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/algorithm/string/</guid>
      <description>字符串 最小覆盖子串 原题
字符串解码 原题
输入：s = &amp;quot;3[a2[c]]&amp;quot; 输出：&amp;quot;accaccacc&amp;quot; 解法：
public class Solution { int ptr; public String decodeString(String s) { LinkedList&amp;lt;String&amp;gt; stk = new LinkedList&amp;lt;String&amp;gt;(); ptr = 0; while (ptr &amp;lt; s.length()) { char cur = s.charAt(ptr); if (Character.isDigit(cur)) { // 获取一个数字并进栈  String digits = getDigits(s); stk.addLast(digits); } else if (Character.isLetter(cur) || cur == &amp;#39;[&amp;#39;) { // 获取一个字母并进栈  stk.addLast(String.valueOf(s.charAt(ptr++))); } else { ++ptr; LinkedList&amp;lt;String&amp;gt; sub = new LinkedList&amp;lt;String&amp;gt;(); while (!</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://kunzhao.org/docs/tutorial/algorithm/dp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/algorithm/dp/</guid>
      <description>动态规划 打家劫舍② 原题
所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。
class Solution { public int rob(int[] nums) { if(nums.length == 0) return 0; if(nums.length == 1) return nums[0]; return Math.max(myRob(Arrays.copyOfRange(nums, 0, nums.length - 1)), myRob(Arrays.copyOfRange(nums, 1, nums.length))); } private int myRob(int[] nums) { int pre = 0, cur = 0, tmp; for(int num : nums) { tmp = cur; cur = Math.max(pre + num, cur); pre = tmp; } return cur; } } </description>
    </item>
    
  </channel>
</rss>
