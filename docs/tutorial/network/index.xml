<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络协议 on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/network/</link>
    <description>Recent content in 网络协议 on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DHCP</title>
      <link>https://kunzhao.org/docs/tutorial/network/dhcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/dhcp/</guid>
      <description>DHCP DHCP 是 Dynamic Host Configuration Protocol (动态主机配置协议) 的缩写。
作用 手机、电脑或其它网络设备想要与其它计算机进行通讯，就需要配置 IP 地址，DHCP 协议就是为网络设备动态分配 IP 地址的一种协议。DHCP 底层基于 UDP 传输层协议，端口 67 是 DHCP Server 端使用的端口，端口 68 是 DHCP Client 端使用的接口。
工作方式 DHCP 协议分配 IP 地址可以分为 4 个步骤：
Discovery 网络中新加入的某个设备（DHCP 客户端），会使用 IP 地址 0.0.0.0 向该网络发送一个广播包，这个包的目的 IP 地址是 255.255.255.255。这个 UDP 包封装的内容如下所示：
   头 内容     MAC 头 源 MAC：设备自身的 MAC 地址，目的 MAC 地址：FF:FF:FF:FF:FF:FF   IP 头 源 IP: 0.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://kunzhao.org/docs/tutorial/network/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/http/</guid>
      <description>HTTP 常见状态码    状态码 含义     1xx Information response   100 continue   101 Switching Protocols   2xx success   200 OK: 成功响应   201 Created   202 Accepted   204 No Content: 服务器已经成功处理请求，没有返回任何 Body (比如服务器收到一个发邮件的请求，服务器返回 204，表示已经收到请求，邮件后续会发送)   206 Partial Content: 服务器返回了某个文件的一部分   3xx redirection   300 Multiple Choices 是一个用来表示重定向的响应状态码，表示该请求拥有多种可能的响应。用户代理或者用户自身应该从中选择一个。   301 Moved Permanently: 永久重定向   302 Found: 临时重定向   304 Not Modified: 浏览器通过 If-None-Match 头或 If-Modified-Since 头询问，服务器告知文件未改动   4xx client errors   400 Bad Request: 客户端发送的 HTTP 有语法错误、太大、帧错误等   401 Unauthorized   403 Forbidden   404 Not Found   405 Method Not Allowed   429 Too Many Requests   499 Nginx 自己定义的，client has closed connection   5xx server errors   500 Internal Server Error   502 Bad Gateway   503 Service Unavailable   504 Gateway Timeout    HTTP 方法    方法 含义     GET 获取数据   HEAD 与 GET 类似，但只返回响应头   POST 提交表单   PUT 用一个新的资源完全替换掉服务器的资源   DELETE 删除资源   CONNECT 建立一个 tunnel   OPTIONS 询问服务器支持哪些方法   TRACE 发起环回诊断，主要用于诊断   PATCH 对服务器资源进行部分更新    HTTP 报文 在浏览器中输入 &amp;ldquo;kunzhao.</description>
    </item>
    
    <item>
      <title>HTTP2</title>
      <link>https://kunzhao.org/docs/tutorial/network/http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/http2/</guid>
      <description>HTTP2 二进制分帧层 HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。
HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。
数据流、消息和帧 新的二进制分帧机制改变了客户端与服务器之间交换数据的方式。 为了说明这个过程，我们需要了解 HTTP/2 的三个概念：
 数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。 消息：与逻辑请求或响应消息对应的完整的一系列帧。 帧：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。  这些概念的关系总结如下：
 所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。 每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。 每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。 帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。  简言之，HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。 这是 HTTP/2 协议所有其他功能和性能优化的基础。
请求与响应复用 在 HTTP/1.x 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 TCP 连接。 这是 HTTP/1.x 交付模型的直接结果，该模型可以保证每个连接每次只交付一个响应（响应排队）。 更糟糕的是，这种模型也会导致队首阻塞，从而造成底层 TCP 连接的效率低下。
HTTP/2 中新的二进制分帧层突破了这些限制，实现了完整的请求和响应复用：客户端和服务器可以将 HTTP 消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。
快照捕捉了同一个连接内并行的多个数据流。 客户端正在向服务器传输一个 DATA 帧（数据流 5），与此同时，服务器正向客户端交错发送数据流 1 和数据流 3 的一系列帧。因此，一个连接上同时有三个并行数据流。
将 HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装是 HTTP 2 最重要的一项增强。事实上，这个机制会在整个网络技术栈中引发一系列连锁反应，从而带来巨大的性能提升，让我们可以：</description>
    </item>
    
    <item>
      <title>HTTP3</title>
      <link>https://kunzhao.org/docs/tutorial/network/http3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/http3/</guid>
      <description>HTTP3 HTTP/1.1 和 HTTP/2 使用 TCP 传输协议，HTTP/3 使用 QUIC (Quick UDP Internet Connections) 传输层协议，其是由 Google 开发的一种基于 UDP 的传输协议。之所以用 QUIC 协议的最主要原因，是为了彻底解决队头阻塞问题。
QUIC TCP 队头阻塞 HTTP/2 解决了 HTTP 的队头拥塞（head of line blocking）问题，客户端无须等待一个请求完成才能发送下一个请求，但它解决的只是 HTTP 的队头阻塞问题。
如果 HTTP/2 连接双方的网络中有一个数据包丢失，或者任何一方的网络出现中断，整个TCP连接就会暂停，丢失的数据包需要被重新传输。因为TCP是一个按序传输的链条，因此如果其中一个点丢失了，链路上之后的内容就都需要等待。
这种单个数据包造成的阻塞，就是 TCP 上的队头阻塞（head of line blocking）。
安全性 QUIC 始终保证安全性。QUIC 协议没有明文的版本，所以想要建立一个 QUIC 连接，就必须通过 TLS 1.3 来安全地建立一个加密连接。QUIC 只在加密协议协商时会发送几个明文传送的初始握手报文。
减少延迟 TCP 需要 3 次握手，QUIC 提供了 0-RTT 和 1-RTT 握手，减少了协商和建立连接所需要的时间。
HTTP3 协议特点 协议栈 可靠性 虽然 UDP 不提供可靠的传输，但 QUIC 在基于 UDP 之时增加了一层带来可靠性的层。它提供了数据包重传、拥塞控制、调整传输节奏（pacing）以及其他一些TCP中存在的特性。</description>
    </item>
    
    <item>
      <title>HTTPS</title>
      <link>https://kunzhao.org/docs/tutorial/network/https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/https/</guid>
      <description>HTTPS 为什么出现 HTTPS 防止 敏感数据 (银行卡号、账号密码等) 被劫持。HTTPS 会对 HTTP 的请求和响应进行加密，因此即使劫持，攻击者看到的也都是一些随机的字符串。
SSL/TLS 双向非对称加密  Client 和 Server 把自己的公钥公开出去，各自保留自己的私钥。
 客户端 (PubA、PriA) 给服务器 (PubB、PriB) 发送消息的过程如下：
// 私钥签名，再用服务器的公钥加密 let sign = PriA(msg) let encryption = PubB(sign) Client --encryption--&amp;gt; Server 服务器接受客户端消息的过程：
// 私钥解密，再用客户端的公钥验证签名 PubA(unEncryption(PriB, encryption), &#39;验证签名&#39;)  签名和验签：私钥签名，公钥验签，目的防篡改。 加密和解密：公钥加密，私钥解密，目的防止第三方拦截偷听。  单向非对称加密  互联网上，只能 Client 验证 Server，因此只有服务器提供一对公钥和私钥即可。
 当然，如果是银行网银，那么也有验证每个客户端的合法性，给用户发的 U 盘，就包含了客户端的公钥和私钥对，用的是双向非对称加密。
SSL/TLS 的原理就是，先单向非对称加密，然后再对称加密：
RSA 应用场景 （1）加密
Bob 想要给 Alice 发送 &amp;ldquo;Hello Alice!&amp;rdquo; 这个信息：
 公钥加密 私钥解密  （2）数字签名</description>
    </item>
    
    <item>
      <title>CDN</title>
      <link>https://kunzhao.org/docs/tutorial/network/cdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/cdn/</guid>
      <description>CDN  核心理念：就近访问数据
 CDN 分发系统架构 回溯 由于边缘节点数目比较多，但是每个集群规模比较小，不可能缓存下来所有东西，因而可能无法命中，这样就会在边缘节点之上。有区域节点，规模就要更大，缓存的数据会更多，命中的概率也就更大。在区域节点之上是中心节点，规模更大，缓存数据更多。如果还不命中，就只好回源网站访问了。
CDN 可缓存的内容  静态资源：图片、CSS、JS、HTML 文件、流媒体等 动态数据：缓存动态数据  如何找到合适的边缘节点  基于 DNS 的全局负载均衡。
 根据用户 IP、所处的运营商、请求 URL 中携带的参数、服务器的负载情况等综合分析后，全局负载均衡服务器返回一台缓存服务器的 IP 地址。
动态资源如何缓存  边缘计算：动态数据生成的计算、逻辑、存储等，也放到边缘节点，然后定时地从数据源同步存储的数据等内容 路径优化：源站到边缘节点的路径经过优化 (调整 TCP 参数、多路复用、数据压缩)，采用更为可靠的路径来传输  CDN 挂掉怎么办 为了防止 CDN 挂掉，引入的时候要加入一个判断：
&amp;lt;script src=&amp;#34;http://cdn.static.runoob.com/libs/jquery/1.10.2/jquery.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;window.jQuery || document.write(&amp;#39;&amp;lt;script src=&amp;#34;js/vendor/jquery-1.10.2.min.js&amp;#34;&amp;gt;&amp;lt;\/script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt; 这段代码第一行很简单就是你正常引入 cdn 的地址。下面一行的话就是首先判断 Windows.jQuery 是否存在；也就是说判断一下这个CDN是不是挂掉了，如果没有挂掉，那么就直接使用，如果挂掉了，那么就要在后面引入自己的本地资源库。这样就可以保证在可以使用 cdn 的时候使用 cdn 不可以使用的时候就加载本地的。</description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://kunzhao.org/docs/tutorial/network/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/dns/</guid>
      <description>DNS DNS 使用的传输层协议 主要使用 UDP 协议，端口 53, 也有一些采用 TCP 来实现。
DNS 层次结构  根 DNS 服务器 ：返回顶级域 DNS 服务器的 IP 地址 顶级域 DNS 服务器：返回权威 DNS 服务器的 IP 地址 权威 DNS 服务器 ：返回相应主机的 IP 地址  DNS 数据库的记录类型    类型 描述     A、AAAA IP 地址   MX SMTP mail exchangers   NS name servers   CNAME domain name aliases    DNS 的解析流程 DNS 做负载均衡 DNS 除了可以通过名称映射为 IP 地址，它还可以做另外一件事，就是负载均衡。</description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://kunzhao.org/docs/tutorial/network/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/tcp/</guid>
      <description>TCP TCP 头 三次握手  三次握手恰好可以保证 Client 和 Server 对自己的发送、接受能力做了一次确认。
 四次挥手 TIME_WAIT 状态的设计  为什么不直接进入 CLOSED 状态，而是中间有一个 TIME_WAIT 状态 ?
 4元组 (客户端 IP、客户端 Port、服务器 IP、服务器 Port)，无法区分出新连接还是老连接，这会导致老连接上的数据包会串到新的连接上来。
TCP/IP 定义了一个值 MSL，表示数据包在网络上最长逗留时间，默认是 120s。连接保持在 TIME_WAIT 状态，再等待 2 × MSL 时间就可以进入 CLOSED 状态了，防止串数据。
 为什么是两倍的 MSL ?
 因为上图第 4 次发送的数据包，服务器是否收到是不确定的。而如果服务器没有收到，那么服务器会重新发送第三次的数据包。所以整个的时间，最长是两个 MSL。
 为何服务器收到第 4 个 ACK 之后，立刻进入 CLOSED 状态，而不是也进入 TIME_WAIT 状态 ?
 没有必要，因为客户端处于 TIME_WAIT 状态，意味着四元组代表的这个连接要到 2 × MSL 时间之后才能重新启用，服务器即使想要立即连接也无法实现。
大量 TIME_WAIT 状态 如果存在大量的 TIME_WAIT，往往是因为短连接太多，不断的创建连接，然后释放连接，从而导致很多连接在这个状态，可能会导致无法发起新的连接。解决的方式往往是：</description>
    </item>
    
    <item>
      <title>UDP</title>
      <link>https://kunzhao.org/docs/tutorial/network/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/udp/</guid>
      <description>UDP UDP 头 与 TCP 区别  无连接 不保证不丢失、不保证按序到达 基于数据报，一个一个发，一个一个收 无拥塞控制，让我发，我就发，管它洪水滔天 无状态服务  应用场景  需要资源少，网络情况较好的内网，或者对于丢包不敏感的应用 不需要一对一沟通建立连接，可以广播的应用: DHCP 处理速度快、低时延、可以容忍少数丢包 Quick UDP Internet Connections: Google 提出的，降低通信时延 流媒体协议，有的帧比较重要，有的不重要 实时游戏。游戏玩家多，服务器却不多，而维护 TCP 需要一些数据结构 IoT 物联网 4G 网络，数据流量上网的数据面对的协议 GTP-U 就是基于 UDP 的  </description>
    </item>
    
    <item>
      <title>ARP</title>
      <link>https://kunzhao.org/docs/tutorial/network/arp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/arp/</guid>
      <description>ARP ARP 可以将 IP 解析为 MAC 地址。ARP 只适用于 IPv4，不能用于 IPv6，在 IPv6 可以用 ICMPv6 替代 ARP 发送邻居探索消息。
ARP 工作机制 简而言之，ARP 借助 ARP 请求和 ARP 响应两种类型的包确定 MAC 地址：
IP 地址和 MAC 地址缺一不可 知道 IP 地址还需要知道 MAC 地址吗？
如下图所示，主机 A 想要发送 IP 数据包给主机 B，但是必须经过路由器 C。路由器会隔断两个网络，因此无法直接发送到 B。
以太网发送 IP 包，下次要经过哪个路由器发送数据报，这个“下一个路由器”就是相应的 MAC 地址。
RARP MAC 地址解析为 IP 地址的一种协议。</description>
    </item>
    
    <item>
      <title>ICMP</title>
      <link>https://kunzhao.org/docs/tutorial/network/icmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/icmp/</guid>
      <description>ICMP ICMP：确认 IP 包是否成功送达目标地址，通知在发送过程中 IP 包被废弃的原因，改善网络配置等。
ICMP 消息类型 无法到达 超时 IP 包有一个字段叫做 TTL，值随着每次经过一次路由器就会减少 1，减到 0 就会被丢弃，此时 IP 路由器将会发送一个 ICMP 超时的消息。
之所以设置 TTL，视为了避免遇到循环路由，无休止转发的问题。
traceroute 可以显示主机到达特定主机前经历了多少路由器，原理就是从 TTL = 1 开始递增发送 UDP 包，强制接受 ICMP 超时消息的一种方法。
ICMP 回送消息 判断数据包是否已经成功到达
ping 命令就是利用这个消息实现的。</description>
    </item>
    
    <item>
      <title>IP</title>
      <link>https://kunzhao.org/docs/tutorial/network/ip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/network/ip/</guid>
      <description>IP IP 地址属于网络层,主要功能在 WLAN 内进行路由寻址,选择最佳路由。
IP 报文在互联网上传输时,可能要经历多个物理网络,才能从源主机到达目标主机。比如在手机上给某个 PC 端的朋友发送一个信息,经过无线网的 IEEE 802.1x 认证,转到光纤通信上,然后进入内部企业网 802.3 ,并最终到达目标 PC 。由于不同硬件的物理特性不同,对数据帧的最大长度都有不同的限制,这个最大长度被称为最大传输单元,即 MTU ( Maximum Transmission Unit )。那么在不同的物理网之间就可能需要对 IP 报文进行分片,这个工作通常由路由器负责完成。</description>
    </item>
    
  </channel>
</rss>
