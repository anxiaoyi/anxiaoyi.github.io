<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阿里巴巴 Sentinel on 赵坤的个人网站</title>
    <link>https://kunzhao.org/docs/tutorial/sentinel/</link>
    <description>Recent content in 阿里巴巴 Sentinel on 赵坤的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://kunzhao.org/docs/tutorial/sentinel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>架构</title>
      <link>https://kunzhao.org/docs/tutorial/sentinel/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/sentinel/architecture/</guid>
      <description>架构 随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。
有关 Sentinel 更为详细的使用文档和介绍请移至 Sentinel Github Wiki。
 单机和分布式区别
 限流分为单机和分布式两种，单机限流是指限定当前进程里面的某个代码片段的 QPS 或者 并发线程数 或者 整个机器负载指数，一旦超出规则配置的数值就会抛出异常或者返回 false。我把这里的被限流的代码片段称为「临界区」。
而分布式则需要另启一个集中的发票服务器，这个服务器针对每个指定的资源每秒只会生成一定量的票数，在执行临界区的代码之前先去集中的发票服务领票，如果领成功了就可以执行，否则就会抛出限流异常。所以分布式限流代价较高，需要多一次网络读写操作。
 规则控制
 在实际的项目中，规则应该需要支持动态配置。这就需要有一个规则配置源，它可以是 Redis、Zookeeper 等数据库，还需要有一个规则变更通知机制和规则配置后台，允许管理人员可以在后台动态配置规则并实时下发到业务服务器进行控制。
有一些规则源存储不支持事件通知机制，比如关系数据库，Sentinel 也提供了定时刷新规则，比如每隔几秒来刷新内存里面的限流规则。下面是 redis 规则源定义
// redis 地址 RedisConnectionConfig redisConf = new RedisConnectionConfig(&amp;#34;localhost&amp;#34;, 6379, 1000); // 反序列化算法 Converter&amp;lt;String, List&amp;lt;FlowRule&amp;gt;&amp;gt; converter = r -&amp;gt; JSON.parseArray(r, FlowRule.class); // 定义规则源，包含全量和增量部分 // 全量是一个字符串key，增量是 pubsub channel key ReadableDataSource&amp;lt;String, List&amp;lt;FlowRule&amp;gt;&amp;gt; redisDataSource = new RedisDataSource&amp;lt;List&amp;lt;FlowRule&amp;gt;&amp;gt;(redisConf, &amp;#34;app_key&amp;#34;, &amp;#34;app_pubsub_key&amp;#34;, converter); FlowRuleManager.register2Property(redisDataSource.getProperty());  健康状态上报与检查
 接入 Sentinel 的应用服务器需要将自己的限流状态上报到 Dashboard，这样就可以在后台实时呈现所有服务的限流状态。Sentinel 使用拉模型来上报状态，它在当前进程注册了一个 HTTP 服务，Dashboard 会定时来访问这个 HTTP 服务来获取每个服务进程的健康状况和限流信息。</description>
    </item>
    
    <item>
      <title>LeapArray</title>
      <link>https://kunzhao.org/docs/tutorial/sentinel/leaparray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/sentinel/leaparray/</guid>
      <description>LeapArray Sentinel 底层采用高性能的滑动窗口数据结构 LeapArray 来统计实时的秒级指标数据，可以很好地支撑写多于读的高并发场景。
Metric 统计类 LeapArray 作为基础设施，其目的主要是为了在底层配合 Metric 类，以便对资源的各种信息做统计，我们来看 Metric 类都需要统计哪些信息：
public interface Metric extends DebugSupport { // 获取总的成功数量  long success(); // 获取最大的成功数量  long maxSuccess(); // 获取异常数量  long exception(); // 获取阻塞的数量  long block(); // 获取总的通过数量  long pass(); // 获取总响应时间  long rt(); // 获取最小的响应时间  long minRt(); } 相应的，在 Metric 接口中，也有添加各种事件的方法：
public interface Metric extends DebugSupport { // 添加 n 个异常  void addException(int n); // 添加 n 个阻塞  void addBlock(int n); // 添加 n 个成功的响应  void addSuccess(int n); // 添加 n 个通过  void addPass(int n); // 在总响应时间上，添加 rt 时间  void addRT(long rt); } 以 ArrayMetric 的 addSuccess(int count) 和 success() 为例，我们看下在内部是如何使用 LeapArray 提供资源统计服务的。</description>
    </item>
    
    <item>
      <title>可扩展性</title>
      <link>https://kunzhao.org/docs/tutorial/sentinel/spi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kunzhao.org/docs/tutorial/sentinel/spi/</guid>
      <description>可扩展性 SpiLoader public final class SpiLoader { public static &amp;lt;T&amp;gt; T loadFirstInstanceOrDefault(Class&amp;lt;T&amp;gt; clazz, Class&amp;lt;? extends T&amp;gt; defaultClass) { AssertUtil.notNull(clazz, &amp;#34;SPI class cannot be null&amp;#34;); AssertUtil.notNull(defaultClass, &amp;#34;default SPI class cannot be null&amp;#34;); try { String key = clazz.getName(); // Not thread-safe, as it&amp;#39;s expected to be resolved in a thread-safe context.  ServiceLoader&amp;lt;T&amp;gt; serviceLoader = SERVICE_LOADER_MAP.get(key); if (serviceLoader == null) { serviceLoader = ServiceLoaderUtil.getServiceLoader(clazz); SERVICE_LOADER_MAP.put(key, serviceLoader); } for (T instance : serviceLoader) { if (instance.</description>
    </item>
    
  </channel>
</rss>
